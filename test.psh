-- PureShader TestCode

{-
type ShaderM stage params output :: ShaderStage -> * -> * -> * =
  {#- BUILTIN PARSED TYPE: GLSL BUILTIN VARYING SETTER PROVIDER MONAD -#}
type Uniform t :: * -> * = {#- BUILTIN TYPE: Uniform Descriptor input signature -#}
type Sampler2D :: * = {#- BUILTIN TYPE: Sampler2D Descriptor input signature -#}
-}

type Float4 = Vector4 Float
type Float3 = Vector3 Float

foreign import ccall "mat3" mat3 :: Matrix4 -> Matrix3
foreign import ccall "vec4" vec4_fromv3 :: Float3 -> Float4
foreign import ccall "texture2D" texture2D :: Sampler2D -> Float2 -> Float4
{- `coerce_xyz_4` must be declared in linking code -}
foreign import ccall "coerce_xyz_4" xyz4 :: Float4 -> Float3

(.) :: (b -> c) -> (a -> b) -> a -> c
f . g = \x -> f (g x)

class VectorCoerce4 a where
  xyz :: Vector4 a -> Vector3 a

instance VectorCoerce4 Float where
  xyz = xyz4

data ShaderStage = Vertex | Fragment | Compute | Geometry | TessellationEvaluation | TessellationControl
type VertexShader = ShaderM Vertex
type FragmentShader = ShaderM Fragment

[SpecializedConst 0]
lightIntensity = 1.0

-- syntax sugar for `data A = A { fields... }`
struct VshInputs where
  position :: Float3
  normal :: Float3
  uv :: Float2
struct VshOutputs where
  [Position]
  position :: Float4
  lambert :: Float
  uv :: Float2

struct CameraSettings where
  proj_matrix :: Matrix4

struct VertexParameters where
  [DescriptorBound 0 0]
  camera :: Uniform CameraSettings

[On UseTexture]
struct FragmentParameters where
  [DescriptorBound 0 1]
  tex :: Sampler2D

[Off UseTexture]
[PushConstant]
struct FragmentParameters where
  r :: Float
  g :: Float
  b :: Float
  a :: Float

vsh_main :: VshInputs -> VertexShader VertexParameters VshOutputs
vsh_main v = do
  camera <- getParameters >>= _.camera
  let lambert = dot (mat3 camera.proj_matrix * v.normal) $ negate v.position in
  pure $ VshOutputs
    { position = transpose camera.proj_matrix * v.position
    , lambert = lambert * lightIntensity
    , uv }

fsh_main :: VshOutpus -> FragmentShader FragmentParameters Float4
fsh_main vsh = do
  let
    processColor :: Float4 -> Float4
    processColor tc = let col_rgb = xyz c * vsh.lambert in (vec4_fromv3 col_rgb 1.0) * a c
  tc <- mainColor >>= newVar
  modifyVar processColor tc
  getVar tc

mainColor :: FragmentShader FragmentParameters Float4
[On UseTexture]
mainColor = do
  tex <- getParameters >>= _.tex
  texture2D tex vsh.uv
[Off UseTexture]
mainColor = fmap reconstructColor getParameters where
  reconstructColor ps = Float4 ps.r ps.g ps.b ps.a
